#include <iostream>

class DynamicArray {
public:
    DynamicArray(size_t initialSize) : size(0), capacity(initialSize), data(new int[initialSize]) {}

    ~DynamicArray() {
        delete[] data;
    }

    void push_back(int value) {
        if (size == capacity) {
          
            capacity *= 2;
            int* newData = new int[capacity];
            std::copy(data, data + size, newData);
            delete[] data;
            data = newData;
        }
        data[size] = value;
        size++;
    }

    int& operator[](std::size_t index) {
        if (index >= size) {
            throw out_of_range("Index out of range");
        }
        return data[index];
    }

    // Get the current size of the array
    std::size_t size() const {
        return size;
    }

private:
    size_t size;
    size_t capacity;
    int* data;
};

int main() {
    arr.push_back(1);
    arr.push_back(2);
    arr.push_back(3);


    for size_t i = 0; i < arr.size(); i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
